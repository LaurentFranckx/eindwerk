Next Word Prediction with R
========================================================
author: me 
date: 

<style type="text/css">
.small-code pre code {
font-size: 1.3em;
}
</style>


Central objectives and constraints:
========================================================

- Generate "next" word prediction for English sentence with 3 datasets: Twitter, news articles and blogs
- Underlying prediction algorithm should be accurate 
- Keep data size for on-line implementation within Shiny limits
- Quick response to user input  (prediction within 1 sec)
- Correct for spelling mistakes by user through approximate matching 
- Link to app and user guidance:

https://lfranckx.shinyapps.io/CapVersion2/

Data: sources and approach 
========================================================


- Differences between 3 datasets requires separate analysis 
- Stopwords are integral part of content: keep them 
- No stemming: users want complete word, not its stem
- Very high number of words and low order n-grams with low count: eliminate to improve speed and reduce memory requirements without decreasing accuracy 
- Algorithm optimised for 3-grams, but also uses prediction based on 2- and 1-grams: backoff  with 'discounting' (see next slide)
- Impact of discount factor on accuracy depends on how many words can be suggested (see last slide)
- Key for improving accuracy:  using 3-grams where possible and provide more than 1 suggestion



Description of algorithm
========================================================

![alt text](algor_flow.PNG)





Average accuracy in validation sets
========================================================

```{r, echo=FALSE, fig.width=6,fig.height=3.5,dpi=300,out.width="1920px",height="1080px"}
library(ggplot2)
library(plyr)
library(reshape)
load("D:/coursera/dsc_capstone/mean_accuracy.RData")
ngram_vec <- rep(c(1,2,3),10)
ngram_vec <- paste(ngram_vec,"gram", sep="-")
disfactor <- rep(seq(0.1,1, by = 0.1),3)
#disfactor <- as.character(disfactor[order(disfactor)])
ngrdisc <- cbind.data.frame(ngram_vec,disfactor)
df_of_means_for_plot <- cbind.data.frame(ngrdisc,df_of_means_new)
id_vars <- c("ngram_vec","disfactor")
meas_vars <- c("accu1","accu2","accu3")
df_of_means_for_plot <- as.data.frame(df_of_means_for_plot)
df_of_means_for_plot1 <- df_of_means_for_plot[ , c(id_vars,"accu1")]
df_of_means_for_plot1$words <- c(1)
names(df_of_means_for_plot1) <- gsub("accu1","Accuracy",names(df_of_means_for_plot1))
df_of_means_for_plot2 <- df_of_means_for_plot[ , c(id_vars, "accu2")]
df_of_means_for_plot2$words <- c(2)
names(df_of_means_for_plot2) <- gsub("accu2","Accuracy",names(df_of_means_for_plot2))
df_of_means_for_plot3 <- df_of_means_for_plot[ , c(id_vars,"accu3")]
df_of_means_for_plot3$words <- c(3)
names(df_of_means_for_plot3) <- gsub("accu3","Accuracy",names(df_of_means_for_plot3))

df_of_means_for_plotnew <- rbind(df_of_means_for_plot1, df_of_means_for_plot2)
df_of_means_for_plotnew <- rbind(df_of_means_for_plotnew, df_of_means_for_plot3)
names(df_of_means_for_plotnew) <- gsub("disfactor","Discount_factor",names(df_of_means_for_plotnew))

df_of_means_for_plotnew$words <- as.factor(df_of_means_for_plotnew$words)
names(df_of_means_for_plotnew) <- gsub("words","suggested_words",names(df_of_means_for_plotnew))

df_of_means_for_plotnew$Accuracy <- as.numeric(df_of_means_for_plotnew$Accuracy)
#round(df_of_means_for_plotnew$Accuracy,3 )

#df_of_means_for_plot <- melt(df_of_means_for_plot, id.vars = id_vars, measure.vars = meas_vars )
#df_of_means_for_plot <- melt(df_of_means_for_plot, id.vars = id_vars )

#qplot(words, data =df_of_means_for_plotnew , geom = "bar") + facet_grid(ngram_vec   ~ disfactor)
#qplot(ngram_vec, data =df_of_means_for_plot , geom = "line") + facet_grid(.  ~ disfactor)
# ggplot(df_of_means_for_plotnew, aes(Discount_factor, Accuracy, group = words)) + geom_point() + facet_grid(.  ~ ngram_vec)


ggplot(df_of_means_for_plotnew, aes(Discount_factor, Accuracy, colour = suggested_words)) + geom_point() + facet_grid(.  ~ ngram_vec)

#ggplot(df_of_means_for_plotnew, aes(Discount_factor, Accuracy, colour = c(words, ngram_vec))) + geom_point() 
# 
# ggplot(df_of_means_for_plotnew, aes(Discount_factor, Accuracy, group = words), scale_colour_hue = levels(df_of_means_for_plotnew$ngram_vec)) + geom_point()


```

<small>




</small>